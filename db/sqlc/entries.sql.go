// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: entries.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
    account_id,
    amount
) VALUES (
   2, 20
)RETURNING id, name, account_id, amount, created_at
`

func (q *Queries) CreateEntry(ctx context.Context) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries WHERE id = 1
`

func (q *Queries) DeleteEntry(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteEntry)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT id, name, account_id, amount, created_at FROM entries
WHERE id = 1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntry = `-- name: ListEntry :many
SELECT id, name, account_id, amount, created_at FROM entries
ORDER BY name
LIMIT 1
OFFSET 3
`

func (q *Queries) ListEntry(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntry)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entries
set balance = 2
WHERE id = 1
RETURNING id, name, account_id, amount, created_at
`

func (q *Queries) UpdateEntry(ctx context.Context) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
